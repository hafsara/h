Excellent Hafsa 👏
Puisque tu as déjà **buildé Redis 8.2.2** (serveur + cli) — parfait 👌
On va simplement automatiser **le déploiement Sentinel haute disponibilité (3 nœuds)** avec **Ansible**, sans utiliser les packages système.

---

## 🎯 Objectif

Déployer une architecture **Redis Sentinel 8.2.2 HA** sur **3 serveurs** :

| Serveur  | Rôle Redis | Rôle Sentinel |
| -------- | ---------- | ------------- |
| **srv1** | Master     | Sentinel      |
| **srv2** | Replica    | Sentinel      |
| **srv3** | Replica    | Sentinel      |

Les sentinels vont surveiller un master nommé `mymaster` avec mot de passe `S3cur3P@ss`.

---

## 🗂️ Structure du playbook

```
ansible/
├── inventory.ini
├── deploy_redis_sentinel.yml
└── roles/
    └── redis_sentinel/
        ├── tasks/
        │   └── main.yml
        ├── templates/
        │   ├── redis.conf.j2
        │   └── sentinel.conf.j2
        └── files/
            ├── redis-server
            └── redis-cli
```

---

## 📋 1. **inventory.ini**

```ini
[redis_sentinel]
srv1 ansible_host=10.0.0.1 redis_role=master
srv2 ansible_host=10.0.0.2 redis_role=replica
srv3 ansible_host=10.0.0.3 redis_role=replica
```

---

## 📋 2. **deploy_redis_sentinel.yml**

```yaml
---
- name: Deploy Redis 8.2.2 Sentinel Cluster
  hosts: redis_sentinel
  become: yes
  vars:
    redis_version: "8.2.2"
    redis_install_dir: "/opt/redis-{{ redis_version }}"
    redis_data_dir: "/var/lib/redis"
    redis_log_dir: "/var/log/redis"
    redis_conf_dir: "/etc/redis"
    redis_user: "redis"
    redis_port: 6379
    sentinel_port: 26379
    redis_password: "S3cur3P@ss"
    redis_master_name: "mymaster"
    redis_master_host: "10.0.0.1"

  roles:
    - redis_sentinel
```

---

## 📋 3. **roles/redis_sentinel/tasks/main.yml**

```yaml
---
- name: Ensure Redis user exists
  ansible.builtin.user:
    name: "{{ redis_user }}"
    shell: /sbin/nologin
    system: yes

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ redis_user }}"
    group: "{{ redis_user }}"
    mode: "0755"
  loop:
    - "{{ redis_data_dir }}"
    - "{{ redis_log_dir }}"
    - "{{ redis_conf_dir }}"

- name: Copy redis-server and redis-cli binaries
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    mode: "0755"
  loop:
    - redis-server
    - redis-cli

- name: Generate redis.conf
  ansible.builtin.template:
    src: "redis.conf.j2"
    dest: "{{ redis_conf_dir }}/redis.conf"
    owner: "{{ redis_user }}"
    group: "{{ redis_user }}"
    mode: "0644"
  notify: Restart Redis

- name: Generate sentinel.conf
  ansible.builtin.template:
    src: "sentinel.conf.j2"
    dest: "{{ redis_conf_dir }}/sentinel.conf"
    owner: "{{ redis_user }}"
    group: "{{ redis_user }}"
    mode: "0644"
  notify: Restart Sentinel

- name: Create systemd service for redis
  ansible.builtin.copy:
    dest: /etc/systemd/system/redis.service
    content: |
      [Unit]
      Description=Redis Server
      After=network.target

      [Service]
      User={{ redis_user }}
      ExecStart=/usr/local/bin/redis-server {{ redis_conf_dir }}/redis.conf
      ExecStop=/usr/local/bin/redis-cli -a {{ redis_password }} shutdown
      Restart=always
      LimitNOFILE=10000

      [Install]
      WantedBy=multi-user.target
  notify: Restart Redis

- name: Create systemd service for sentinel
  ansible.builtin.copy:
    dest: /etc/systemd/system/redis-sentinel.service
    content: |
      [Unit]
      Description=Redis Sentinel
      After=network.target redis.service

      [Service]
      User={{ redis_user }}
      ExecStart=/usr/local/bin/redis-sentinel {{ redis_conf_dir }}/sentinel.conf --daemonize no
      Restart=always
      LimitNOFILE=10000

      [Install]
      WantedBy=multi-user.target
  notify: Restart Sentinel

- name: Enable and start services
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - redis
    - redis-sentinel

# Handlers
- name: Restart Redis
  ansible.builtin.systemd:
    name: redis
    state: restarted
    daemon_reload: yes

- name: Restart Sentinel
  ansible.builtin.systemd:
    name: redis-sentinel
    state: restarted
    daemon_reload: yes
```

---

## 📋 4. **roles/redis_sentinel/templates/redis.conf.j2**

```jinja
bind 0.0.0.0
port {{ redis_port }}
protected-mode no

dir {{ redis_data_dir }}
logfile {{ redis_log_dir }}/redis.log
dbfilename dump.rdb
appendonly yes

requirepass {{ redis_password }}
masterauth {{ redis_password }}

{% if redis_role == "replica" %}
replicaof {{ redis_master_host }} {{ redis_port }}
{% endif %}

timeout 0
tcp-keepalive 60
```

---

## 📋 5. **roles/redis_sentinel/templates/sentinel.conf.j2**

```jinja
port {{ sentinel_port }}
bind 0.0.0.0
protected-mode no
daemonize no
dir /tmp
logfile {{ redis_log_dir }}/sentinel.log

sentinel monitor {{ redis_master_name }} {{ redis_master_host }} {{ redis_port }} 2
sentinel auth-pass {{ redis_master_name }} {{ redis_password }}
sentinel down-after-milliseconds {{ redis_master_name }} 5000
sentinel failover-timeout {{ redis_master_name }} 10000
sentinel parallel-syncs {{ redis_master_name }} 1
```

---

## 🚀 6. **Déploiement**

> ⚙️ Assure-toi d’avoir ton `redis-server` et `redis-cli` déjà compilés dans `roles/redis_sentinel/files/`.

Puis lance :

```bash
ansible-playbook -i inventory.ini deploy_redis_sentinel.yml
```

---

## ✅ 7. **Vérifications post-déploiement**

Sur n’importe quel nœud :

```bash
redis-cli -a S3cur3P@ss info replication
```

Tu dois voir :

```
role:master
connected_slaves:2
```

Et côté Sentinel :

```bash
redis-cli -p 26379 SENTINEL get-master-addr-by-name mymaster
```

Tu verras :

```
1) "10.0.0.1"
2) "6379"
```

---

## 🧠 Bonus : Test de failover

Simule un crash du master :

```bash
sudo systemctl stop redis
sleep 10
redis-cli -p 26379 SENTINEL get-master-addr-by-name mymaster
```

Le nouveau master sera automatiquement **srv2** ou **srv3** 🔁

---

Souhaites-tu que je te génère la **version avec failover monitoring via Prometheus exporter** (pour voir les bascules en live) ?
👉 C’est souvent très utile en prod (et je peux te l’intégrer au même playbook).
