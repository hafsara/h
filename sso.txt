Voici comment migrer votre frontend Angular pour une authentification OIDC avec Apigee en utilisant `angular-oauth2-oidc` :

1. **Installez la bibliothèque** :
```bash
npm install angular-oauth2-oidc
```

2. **Configurez le module OAuth2** (`app.module.ts`) :
```typescript
import { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';

@NgModule({
  imports: [
    OAuthModule.forRoot({
      resourceServer: {
        allowedUrls: ['https://your-apigee-api-base-url'],
        sendAccessToken: true
      }
    })
  ],
  providers: [
    { provide: OAuthStorage, useValue: localStorage }
  ]
})
```

3. **Configuration OIDC** (`auth.config.ts`) :
```typescript
import { AuthConfig } from 'angular-oauth2-oidc';

export const authConfig: AuthConfig = {
  issuer: 'https://your-apigee-domain/oauth2/issuer', // URL OIDC d'Apigee
  redirectUri: window.location.origin + '/callback',
  clientId: 'your-client-id-from-apigee',
  responseType: 'code',
  scope: 'openid profile email', // Scopes selon votre configuration Apigee
  showDebugInformation: true, // À désactiver en production
  tokenEndpoint: 'https://your-apigee-domain/oauth2/token',
  userinfoEndpoint: 'https://your-apigee-domain/oauth2/userinfo',
  loginUrl: 'https://your-apigee-domain/oauth2/authorize',
  logoutUrl: 'https://your-apigee-domain/oauth2/logout'
};
```

4. **Service d'authentification** (`auth.service.ts`) :
```typescript
import { Injectable } from '@angular/core';
import { OAuthService } from 'angular-oauth2-oidc';

@Injectable({ providedIn: 'root' })
export class AuthService {
  constructor(private oauthService: OAuthService) {
    this.configure();
  }

  private configure() {
    this.oauthService.configure(authConfig);
    this.oauthService.setupAutomaticSilentRefresh();
    this.oauthService.loadDiscoveryDocumentAndTryLogin();
  }

  login() {
    this.oauthService.initLoginFlow();
  }

  logout() {
    this.oauthService.logOut();
  }

  get token() {
    return this.oauthService.getAccessToken();
  }
}
```

5. **Gestion du callback** (`callback.component.ts`) :
```typescript
import { Component } from '@angular/core';
import { OAuthService } from 'angular-oauth2-oidc';

@Component({
  template: '<p>Processing authentication...</p>'
})
export class CallbackComponent {
  constructor(private oauthService: OAuthService) {
    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {
      if (this.oauthService.hasValidAccessToken()) {
        window.location.href = '/'; // Redirection après authentification
      }
    });
  }
}
```

6. **Configuration des routes** (`app-routing.module.ts`) :
```typescript
const routes: Routes = [
  { path: 'callback', component: CallbackComponent },
  // ... autres routes
];
```

7. **Protection des routes** avec un guard :
```typescript
export class AuthGuard implements CanActivate {
  constructor(private oauthService: OAuthService) {}

  canActivate(): boolean {
    if (this.oauthService.hasValidAccessToken()) {
      return true;
    } else {
      this.oauthService.initLoginFlow();
      return false;
    }
  }
}
```

**Configuration Apigee** :
- Assurez-vous que dans votre configuration OAuth2 Apigee :
  - Les URIs de redirection incluent `http://localhost:4200/callback` (et votre URL de production)
  - Le flux "Authorization Code" avec PKCE est activé
  - Les scopes `openid`, `profile`, et `email` sont configurés

**Variables à modifier** :
- `your-apigee-domain` : Votre domaine Apigee
- `your-client-id-from-apigee` : Client ID généré par Apigee
- `your-apigee-api-base-url` : URL de base de vos APIs protégées

**Pour tester en local** :
1. Lancez votre app avec `ng serve`
2. Apigee doit accepter `localhost:4200` comme origine valide
3. Vérifiez la configuration CORS dans Apigee

N'oubliez pas de :
- Configurer les variables d'environnement pour différents environnements
- Ajouter la gestion des erreurs
- Implémenter un silent refresh pour renouveler les tokens
- Sécuriser les tokens dans le stockage local

Cette configuration utilise le flux Authorization Code avec PKCE, recommandé pour les applications clientes publiques comme les SPAs Angular.