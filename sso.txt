Parfait üëç Tu veux la **version compl√®te, corrig√©e et directement compatible** avec ton projet actuel (qui utilise d√©j√† `AuthGuard`, `SharedService`, et Apigee comme passerelle SSO).
Voici donc le **code final coh√©rent et fonctionnel**, pr√™t √† coller dans ton projet Angular existant.

---

# ‚úÖ MIGRATION ANGULAR ‚Üí APIGEE (OAuth2/OIDC + PKCE)

## 1. Installation

```bash
npm install angular-oauth2-oidc @angular/cdk
```

---

## 2. Configuration des environnements

**`src/environments/environment.ts`**

```typescript
export const environment = {
  production: false,
  apigee: {
    baseUrl: 'https://your-org-test.apigee.net/v1',
    authServer: 'https://your-org-test.apigee.net/oauth2',
  },
  oidc: {
    issuer: 'https://your-idp-domain.com/auth/realms/your-realm',
    clientId: 'angular-client-id',
    redirectUri: window.location.origin + '/localhost', // callback Angular
    postLogoutRedirectUri: window.location.origin,
    scope: 'openid profile email',
    responseType: 'code',
    showDebugInformation: true,
    requireHttps: false, // pour dev
  },
};
```

**`src/environments/environment.prod.ts`**

```typescript
export const environment = {
  production: true,
  apigee: {
    baseUrl: 'https://your-prod-org.apigee.net/v1',
    authServer: 'https://your-prod-org.apigee.net/oauth2',
  },
  oidc: {
    issuer: 'https://your-prod-idp.com/auth/realms/your-realm',
    clientId: 'angular-prod-client-id',
    redirectUri: window.location.origin + '/callback',
    postLogoutRedirectUri: window.location.origin,
    scope: 'openid profile email',
    responseType: 'code',
    showDebugInformation: false,
    requireHttps: true,
  },
};
```

---

## 3. AuthService (SSO Apigee + OIDC)

**`src/app/services/auth.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { OAuthService, AuthConfig } from 'angular-oauth2-oidc';
import { BehaviorSubject } from 'rxjs';
import { environment } from '../../environments/environment';
import { SharedService } from './shared.service';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private isAuthenticatedSubject$ = new BehaviorSubject<boolean>(false);
  public isAuthenticated$ = this.isAuthenticatedSubject$.asObservable();

  constructor(private oauthService: OAuthService, private sharedService: SharedService) {
    this.configureSSO();
  }

  private configureSSO(): void {
    const authConfig: AuthConfig = {
      issuer: environment.oidc.issuer,
      redirectUri: environment.oidc.redirectUri,
      postLogoutRedirectUri: environment.oidc.postLogoutRedirectUri,
      clientId: environment.oidc.clientId,
      responseType: environment.oidc.responseType,
      scope: environment.oidc.scope,
      showDebugInformation: environment.oidc.showDebugInformation,
      requireHttps: environment.oidc.requireHttps,
      useSilentRefresh: false,
      strictDiscoveryDocumentValidation: false,
    };

    this.oauthService.configure(authConfig);

    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {
      const isValid = this.oauthService.hasValidAccessToken();
      this.isAuthenticatedSubject$.next(isValid);
      if (isValid) this.loadUserProfile();
    });

    this.oauthService.events.subscribe(event => {
      if (event.type === 'token_received') {
        this.isAuthenticatedSubject$.next(true);
        this.loadUserProfile();
      }
      if (event.type === 'logout') {
        this.isAuthenticatedSubject$.next(false);
        this.sharedService.clearUserInfo();
      }
    });
  }

  public login(): void {
    this.oauthService.initCodeFlow();
  }

  public logout(): void {
    this.oauthService.logOut();
  }

  public getAccessToken(): string {
    return this.oauthService.getAccessToken();
  }

  public hasValidToken(): boolean {
    return this.oauthService.hasValidAccessToken();
  }

  private loadUserProfile(): void {
    this.oauthService.loadUserProfile().then((profile: any) => {
      this.sharedService.setUserInfo({
        uid: profile.info.sub,
        username: profile.info.preferred_username || profile.info.name,
        avatar: profile.info.picture || null,
      });
    });
  }

  public getAuthHeader(): { [header: string]: string } {
    return { Authorization: `Bearer ${this.getAccessToken()}` };
  }
}
```

---

## 4. SharedService (inchang√© + m√©thode clear)

**`src/app/services/shared.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

interface UserInfo {
  uid: string | null;
  username: string | null;
  avatar: string | null;
}

@Injectable({ providedIn: 'root' })
export class SharedService {
  private userInfoSubject = new BehaviorSubject<UserInfo>({ uid: null, username: null, avatar: null });
  userInfo$ = this.userInfoSubject.asObservable();

  setUserInfo(userInfo: Partial<UserInfo>) {
    const current = this.userInfoSubject.getValue();
    this.userInfoSubject.next({ ...current, ...userInfo });
  }

  getUserInfo(): UserInfo {
    return this.userInfoSubject.getValue();
  }

  clearUserInfo(): void {
    this.userInfoSubject.next({ uid: null, username: null, avatar: null });
  }
}
```

---

## 5. Intercepteur HTTP pour Apigee

**`src/app/interceptors/apigee.interceptor.ts`**

```typescript
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthService } from '../services/auth.service';
import { environment } from '../../environments/environment';

@Injectable()
export class ApigeeInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    if (this.authService.hasValidToken() && req.url.includes(environment.apigee.baseUrl)) {
      const token = this.authService.getAccessToken();
      req = req.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });
    }

    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) this.authService.login();
        return throwError(() => error);
      })
    );
  }
}
```

---

## 6. Guard principal (OIDC SSO + local apps)

**`src/app/guards/auth.guard.ts`**

```typescript
import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(route: ActivatedRouteSnapshot): boolean {
    if (this.authService.hasValidToken()) return true;

    this.authService.login(); // Redirige vers Apigee SSO
    return false;
  }
}
```

---

## 7. Routing

**`src/app/app-routing.module.ts`**

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from './guards/auth.guard';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { FormViewComponent } from './components/form-view/form-view.component';
import { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';

const routes: Routes = [
  { path: 'localhost', redirectTo: '/dashboard', pathMatch: 'full' }, // callback URL
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: 'form-view/:access_token', component: FormViewComponent, canActivate: [AuthGuard] },
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}
```

---

## 8. Module principal

**`src/app/app.module.ts`**

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { OAuthModule, OAuthStorage } from 'angular-oauth2-oidc';
import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module';
import { AuthService } from './services/auth.service';
import { ApigeeInterceptor } from './interceptors/apigee.interceptor';

export function storageFactory(): OAuthStorage {
  return localStorage;
}

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule, AppRoutingModule, OAuthModule.forRoot()],
  providers: [
    AuthService,
    { provide: HTTP_INTERCEPTORS, useClass: ApigeeInterceptor, multi: true },
    { provide: OAuthStorage, useFactory: storageFactory },
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}
```

---

## 9. Composant principal (AppComponent)

**`src/app/app.component.ts`**

```typescript
import { Component } from '@angular/core';
import { AuthService } from './services/auth.service';
import { SharedService } from './services/shared.service';
import { environment } from '../environments/environment';

@Component({
  selector: 'app-root',
  template: `
    <header>
      <nav>
        <span *ngIf="user$ | async as user">
          üë§ {{ user.username || 'Invit√©' }}
        </span>
        <button (click)="login()">Connexion</button>
        <button (click)="logout()">D√©connexion</button>
      </nav>
    </header>

    <main>
      <router-outlet></router-outlet>
    </main>

    <footer>Environment: {{ env }}</footer>
  `,
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  env = environment.production ? 'Production' : 'Development';
  user$ = this.sharedService.userInfo$;

  constructor(private authService: AuthService, private sharedService: SharedService) {}

  login() {
    this.authService.login();
  }

  logout() {
    this.authService.logout();
  }
}
```

---

## 10. Styles basiques

**`src/app/app.component.css`**

```css
header {
  background: #f5f5f5;
  padding: 1rem;
  border-bottom: 1px solid #ccc;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

button {
  margin-left: 10px;
  padding: 5px 10px;
  cursor: pointer;
}
```

---

import { Component, OnInit } from '@angular/core';
import { PrimeNGConfig } from 'primeng/api';
import { AuthService } from './services/auth.service';
import { SharedService } from './services/shared.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {
  title = 'Fouras Manager';

  constructor(
    private primengConfig: PrimeNGConfig,
    private authService: AuthService,
    private sharedService: SharedService
  ) {}

  ngOnInit(): void {
    // Active les effets visuels PrimeNG
    this.primengConfig.ripple = true;

    // Tente automatiquement de restaurer la session SSO au chargement
    // (angular-oauth2-oidc g√®re automatiquement le redirect/callback)
    this.authService.isAuthenticated$.subscribe((isAuth) => {
      if (isAuth) {
        console.log('‚úÖ SSO Apigee connect√©');
      } else {
        console.log('üö´ Aucun token valide, attente de login Apigee‚Ä¶');
      }
    });
  }
}



// src/app/guards/sso.guard.ts
import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const sSOGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  // ‚úÖ Si le token SSO OIDC est valide ‚Üí on laisse passer
  if (authService.hasValidToken()) {
    return true;
  }

  // ‚ùå Sinon ‚Üí d√©clenche l‚Äôauthentification SSO via Apigee
  authService.login(); // lance la redirection vers Apigee
  return false;
};
